#!/system/bin/sh

export PATH="/data/adb/magisk:/data/adb/ksu/bin:/data/adb/ap/bin:$PATH:/data/data/com.termux/files/usr/bin"

module_dir="/data/adb/modules/box4"
scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})

events=$1
if ! [ "${events}" = w ]; then
	return
fi

source ${scripts_dir}/box.config
source ${scripts_dir}/ctr.utils

if [ -f "${run_path}/.lastOutbound" ]; then
	Outbound="$(cat "${run_path}/.lastOutbound")"
fi
if [ -f "${run_path}/.lastClashMode" ]; then
	ClashMode="$(cat "${run_path}/.lastClashMode")"
fi

switchMode(){
	local sta="$(status; echo $?)"
	if [ $1 = 0 ]; then # disconnect, on CellularNetwork
		if [ "${sta}" = "1" ]; then
			start_core
			sleep 3
		elif [ "${sta}" = 2 ] || [ "${sta}" = 3 ]; then
			sleep 1
			switchMode $@
		fi
	else # connect, on WiFi
		if [ "${sta}" = "0" ]; then
			stop_core
			sleep 3
		elif [ "${sta}" = 2 ] || [ "${sta}" = 3 ]; then
			sleep 1
			switchMode $@
		fi
	fi
}

selectMode(){
	local sta="$(status; echo $?)"
	if [ $1 = 0 ]; then # disconnect, on CellularNetwork
		if [ "${sta}" = 0 ]; then
			local target="${default_outbound}"
			if [ -n "${Outbound}" ]; then
				target="${Outbound}"
			fi
			if [ -n "${proxy_outbound}" ]; then
				target="${proxy_outbound}"
			fi
			setOutbound "${select_outbound}" "${target}"
		elif [ "${sta}" = 2 ] || [ "${sta}" = 3 ]; then
			sleep 1
			selectMode $@
		fi
	else # connect, on WiFi
		if [ "${sta}" = 0 ]; then
			local target
			if [ "${use_custom_direct}" = "true" ]; then
				local ssid=`ssid`
				target=`getTarget "${direct_outbound_list}" "${ssid}"`
			else
				target="${direct_outbound}"
			fi
			getNowOutbound > "${run_path}/.lastOutbound"
			setOutbound "${select_outbound}" "${direct_outbound}"
		elif [ "${sta}" = 2 ] || [ "${sta}" = 3 ]; then
			sleep 1
			selectMode $@
		fi
	fi
}

clashMode(){
	local sta="$(status; echo $?)"
	if [ $1 = 0 ]; then # disconnect, on CellularNetwork
		if [ "${sta}" = 0 ]; then
			local target
			target="${direct_clash_mode}"
			if [ -n "${ClashMode}" ]; then
				target="${ClashMode}"
			fi
			if [ -n "${proxy_clash_mode}" ]; then
				target="${proxy_clash_mode}"
			fi
			setMode "${target}"
		# 当从WiFi断开时，先检查核心是否在运行。如果不在（说明之前连接了disable的WiFi），就启动它。
		elif [ "${sta}" = "1" ]; then
			start_core
			sleep 3
			clashMode $@
		elif [ "${sta}" = 2 ] || [ "${sta}" = 3 ]; then
			sleep 1
			clashMode $@
		fi
	else # connect, on WiFi
		if [ "${sta}" = 0 ]; then
			local target
			if [ "${use_custom_direct}" = "true" ]; then
				local ssid=`ssid`
				target=`getTarget "${direct_clash_mode_list}" "${ssid}"`
				# 确保 target 不为空，且为 "stop"
				if [ -n "${target}" ] && [ "${target}" = "stop" ]; then
					# 如果是，则停止核心
					stop_core
					# 核心修改：立即结束函数，不再执行后面的 setMode
					return
				fi
			else
				target="${default_clash_mode}"
			fi
			case "${target}" in
				direct|rule|global)
					# 模式有效，不做任何事，继续执行
					;;
				*)
					# 模式无效或为其他值 (例如 "disable", "" 或拼写错误)
					# 将其设置为安全的默认值
					target="${direct_clash_mode}"
					;;
			esac
			# getNowMode > "${run_path}/.lastClashMode"
			setMode "${target}"
		elif [ "${sta}" = 2 ] || [ "${sta}" = 3 ]; then
			sleep 1
			clashMode $@
		fi
	fi
}

if [ -f "${module_dir}/disable" ]; then
	exit
fi

WiFiStatus=0
if connected; then
	WiFiStatus=1
fi

case ${ctr_mode} in
	switch)
		switchMode ${WiFiStatus};;
	selector)
		selectMode ${WiFiStatus};;
	mode)
		clashMode ${WiFiStatus};;
esac